import os
import telebot
from telebot.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
import schedule
import time
from datetime import datetime, timedelta, timezone
from flask import Flask, request, abort
import threading
import io
import json
from openpyxl import Workbook
from openpyxl.styles import Font, Alignment, Border, Side
from openpyxl.utils import get_column_letter

TOKEN = os.environ.get('BOT_TOKEN')
BOT_URL = '/webhook'
ADMIN_CHAT_ID = os.environ.get('ADMIN_CHAT_ID')

if not TOKEN or not ADMIN_CHAT_ID:
    raise ValueError("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã BOT_TOKEN –∏–ª–∏ ADMIN_CHAT_ID")

bot = telebot.TeleBot(TOKEN)

positions = {
    '–í–∞—Ç—Ä—É—à–∫–∞': 200, '–ö–∞–ø—É—Å—Ç–∞': 130, '–Ø–±–ª–æ–∫–æ': 120, '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å': 130,
    '–ú–∞–∫': 190, '–ü–ª—é—à–∫–∞': 150, '–ß–µ—á–µ–≤–∏—Ü–∞': 140, '–ü–æ–≤–∏–¥–ª–æ': 130,
    '–ö–æ—Ä–∏—Ü–∞': 150, '–°–æ—Å–∏—Å–∫ –≤ —Ç–µ—Å—Ç–µ': 150, '–ë—Ä—É—Å–Ω–∏–∫–∞': 130,
    '–í–∏—à–Ω—è': 130, '–ß–µ—Ä–Ω–∞—è —Å–º–æ—Ä–æ–¥–∏–Ω–∞': 130, '–¢–≤–æ—Ä–æ–≥ —Å –∑–µ–ª–µ–Ω—å—é': 130
}

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
USERS_DB_FILE = 'users_data.json'
ORDERS_DB_FILE = 'orders_history.json'

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏)
current_orders = {}
registration_steps = {}

app = Flask(__name__)

def load_users_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(USERS_DB_FILE):
            with open(USERS_DB_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ users_data: {e}")
    return {}

def save_users_data():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
    try:
        with open(USERS_DB_FILE, 'w', encoding='utf-8') as f:
            json.dump(users_data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è users_data: {e}")

def load_orders_history():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(ORDERS_DB_FILE):
            with open(ORDERS_DB_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ orders_history: {e}")
    return {}

def save_orders_history():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –≤ —Ñ–∞–π–ª"""
    try:
        with open(ORDERS_DB_FILE, 'w', encoding='utf-8') as f:
            json.dump(orders_history, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è orders_history: {e}")

def add_order_to_history(user_data, date_str):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
    try:
        if date_str not in orders_history:
            orders_history[date_str] = []
        
        order_entry = {
            'user_id': user_data.get('user_id'),
            'location_name': user_data['location_name'],
            'address': user_data['address'],
            'orders': user_data['orders'].copy(),
            'total_items': sum(user_data['orders'].values()),
            'timestamp': datetime.now().strftime('%H:%M')
        }
        
        orders_history[date_str].append(order_entry)
        save_orders_history()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é: {e}")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
users_data = load_users_data()
orders_history = load_orders_history()

print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_data)}")
print(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–Ω–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(orders_history)}")

@app.route(BOT_URL, methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return ''
    else:
        abort(403)

@app.route('/')
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Railway! üöÇ"

def get_user_data(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id_str = str(user_id)
    if user_id_str not in users_data:
        users_data[user_id_str] = {
            'user_id': user_id_str,
            'address': '',
            'location_name': '', 
            'orders': {},
            'registered': False,
            'registration_date': datetime.now().strftime('%d.%m.%Y %H:%M')
        }
        save_users_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return users_data[user_id_str]

@bot.message_handler(commands=['start'])
def start(message: Message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    
    if not user_data['registered']:
        start_registration(message)
    else:
        show_main_menu(message.chat.id, user_data)

def start_registration(message):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    user_id = message.from_user.id
    registration_steps[user_id] = 'waiting_location'
    
    bot.send_message(
        message.chat.id,
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–∞—Å.\n\n"
        "üìù **–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤–∞—à–∞ —Ç–æ—á–∫–∞/–º–∞–≥–∞–∑–∏–Ω?**\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ú–∞–≥–∞–∑–∏–Ω —É –¥–æ–º–∞', '–û—Ñ–∏—Å –Ω–∞ –õ–µ–Ω–∏–Ω–∞', '–ö–∞—Ñ–µ –£—é—Ç'"
    )

@bot.message_handler(commands=['admin'])
def admin_panel(message: Message):
    """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if str(message.chat.id) != ADMIN_CHAT_ID:
        bot.reply_to(message, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    markup = InlineKeyboardMarkup(row_width=2)
    buttons = [
        InlineKeyboardButton('üìä Excel –°–≤–æ–¥–∫–∞', callback_data='admin_excel'),
        InlineKeyboardButton('üìã –¢–µ–∫—Å—Ç–æ–≤–∞—è —Å–≤–æ–¥–∫–∞', callback_data='admin_summary'),
        InlineKeyboardButton('üë• –ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤', callback_data='admin_clients'),
        InlineKeyboardButton('üìà –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤', callback_data='admin_history'),
        InlineKeyboardButton('üîÑ –û–±–Ω—É–ª–∏—Ç—å –∑–∞–∫–∞–∑—ã', callback_data='admin_clear'),
        InlineKeyboardButton('üíæ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö', callback_data='admin_export'),
    ]
    markup.add(*buttons[:3])
    markup.add(*buttons[3:])
    
    stats_text = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\nüë• –ö–ª–∏–µ–Ω—Ç–æ–≤: {len(users_data)}\nüì¶ –î–Ω–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(orders_history)}"
    
    bot.send_message(message.chat.id, f"‚öôÔ∏è **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n{stats_text}", reply_markup=markup)

@bot.message_handler(func=lambda message: True)
def handle_messages(message: Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if user_id in registration_steps:
        handle_registration(message)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
    if user_id in current_orders:
        handle_quantity(message)
        return
    
    bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")

def handle_registration(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    user_id = message.from_user.id
    step = registration_steps.get(user_id)
    user_data = get_user_data(user_id)
    
    if step == 'waiting_location':
        user_data['location_name'] = message.text.strip()
        registration_steps[user_id] = 'waiting_address'
        
        bot.send_message(
            message.chat.id,
            "üìç **–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:**\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: '—É–ª. –õ–µ–Ω–∏–Ω–∞, 15', '–¢–¶ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π, 2 —ç—Ç–∞–∂'"
        )
        
    elif step == 'waiting_address':
        user_data['address'] = message.text.strip()
        user_data['registered'] = True
        user_data['registration_date'] = datetime.now().strftime('%d.%m.%Y %H:%M')
        del registration_steps[user_id]
        
        save_users_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        
        bot.send_message(
            message.chat.id,
            f"‚úÖ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
            f"üè™ –¢–æ—á–∫–∞: {user_data['location_name']}\n"
            f"üìç –ê–¥—Ä–µ—Å: {user_data['address']}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑—ã!",
            parse_mode='Markdown'
        )
        
        show_main_menu(message.chat.id, user_data)

def show_main_menu(chat_id, user_data):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    markup = InlineKeyboardMarkup(row_width=2)
    buttons = [
        InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='add_order'),
        InlineKeyboardButton('üìã –ú–æ–π –∑–∞–∫–∞–∑', callback_data='my_order'),
        InlineKeyboardButton('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='edit_order'),
        InlineKeyboardButton('üè™ –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ', callback_data='my_data'),
    ]
    markup.add(*buttons[:2])
    markup.add(*buttons[2:])
    
    welcome_text = f"üè™ {user_data['location_name']}\nüìç {user_data['address']}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    bot.send_message(chat_id, welcome_text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    user_data = get_user_data(user_id)
    
    if call.data == 'add_order':
        show_positions_menu(chat_id)
    elif call.data == 'my_order':
        show_user_order(call, user_data)
    elif call.data == 'edit_order':
        show_edit_menu(call, user_data)
    elif call.data == 'my_data':
        show_user_data(call, user_data)
    elif call.data == 'admin_excel':
        send_excel_summary(call)
    elif call.data == 'admin_summary':
        send_text_summary(call)
    elif call.data == 'admin_clients':
        show_clients_database(call)
    elif call.data == 'admin_history':
        show_orders_history(call)
    elif call.data == 'admin_clear':
        clear_all_orders(call)
    elif call.data == 'admin_export':
        export_all_data(call)
    elif call.data in positions:
        current_orders[user_id] = {'position': call.data}
        bot.answer_callback_query(call.id, f"–í—ã–±—Ä–∞–Ω–æ: {call.data}")
        bot.send_message(chat_id, f"–°–∫–æ–ª—å–∫–æ —à—Ç—É–∫ {call.data}?")
    elif call.data.startswith('edit_'):
        position = call.data[5:]
        current_orders[user_id] = {'position': position, 'editing': True}
        bot.answer_callback_query(call.id, f"–ò–∑–º–µ–Ω—è–µ–º: {position}")
        bot.send_message(chat_id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è {position}:")

def show_positions_menu(chat_id):
    markup = InlineKeyboardMarkup(row_width=2)
    for pos in positions.keys():
        markup.add(InlineKeyboardButton(pos, callback_data=pos))
    markup.add(InlineKeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='back_to_main'))
    
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∑–∞–∫–∞–∑–∞:", reply_markup=markup)

def show_user_order(call, user_data):
    user_orders = user_data['orders']
    
    if not user_orders:
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤")
        bot.send_message(call.message.chat.id, "üì≠ –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
        return
    
    total_items = sum(user_orders.values())
    
    order_text = f"üè™ **{user_data['location_name']}**\n"
    order_text += f"üìç {user_data['address']}\n\n"
    order_text += "üìã **–í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:**\n\n"
    
    for pos, qty in user_orders.items():
        order_text += f"‚Ä¢ {pos}: {qty} —à—Ç.\n"
    
    order_text += f"\nüìä **–ò—Ç–æ–≥–æ:** {total_items} —à—Ç."
    
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, order_text, parse_mode='Markdown')

def show_user_data(call, user_data):
    user_orders = user_data['orders']
    total_items = sum(user_orders.values()) if user_orders else 0
    
    data_text = "üë§ **–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:**\n\n"
    data_text += f"üè™ **–¢–æ—á–∫–∞:** {user_data['location_name']}\n"
    data_text += f"üìç **–ê–¥—Ä–µ—Å:** {user_data['address']}\n"
    data_text += f"üìÖ **–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:** {user_data.get('registration_date', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    data_text += f"üì¶ **–ó–∞–∫–∞–∑–æ–≤ —Å–µ–≥–æ–¥–Ω—è:** {total_items} —à—Ç.\n\n"
    data_text += "_–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ /start_"
    
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, data_text, parse_mode='Markdown')

def show_edit_menu(call, user_data):
    user_orders = user_data['orders']
    
    if not user_orders:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    markup = InlineKeyboardMarkup(row_width=2)
    
    for pos in user_orders.keys():
        markup.add(InlineKeyboardButton(f"‚úèÔ∏è {pos}", callback_data=f'edit_{pos}'))
    
    markup.add(InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ', callback_data='add_order'))
    markup.add(InlineKeyboardButton('üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ', callback_data='clear_order'))
    markup.add(InlineKeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='back_to_main'))
    
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=markup)

def handle_quantity(message: Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    user_data = get_user_data(user_id)
    
    position_data = current_orders[user_id]
    position = position_data['position']
    is_editing = position_data.get('editing', False)
    
    try:
        quantity = int(message.text.strip())
        if quantity < 0:
            raise ValueError
        
        if quantity == 0:
            if position in user_data['orders']:
                del user_data['orders'][position]
            action_text = f"‚ùå –£–¥–∞–ª–µ–Ω–æ: {position}"
        else:
            user_data['orders'][position] = quantity
            action_text = f"{'‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ' if is_editing else '‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ'} {quantity} —à—Ç. {position}"
        
        save_users_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        
        bot.reply_to(message, f"{action_text} –¥–ª—è {user_data['location_name']}!")
        del current_orders[user_id]
        
        show_main_menu(chat_id, user_data)
        
    except ValueError:
        bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (0 –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏):")

def generate_excel_file():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel —Ñ–∞–π–ª–∞ —Å–æ —Å–≤–æ–¥–∫–æ–π"""
    active_users = {uid: data for uid, data in users_data.items() if data.get('orders')}
    
    if not active_users:
        return None
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
    clients_data = []
    for user_id, user_data in active_users.items():
        if user_data.get('orders'):
            clients_data.append({
                'name': user_data['location_name'],
                'address': user_data['address'],
                'orders': user_data['orders']
            })
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ—á–∫–∏
    clients_data.sort(key=lambda x: x['name'])
    
    # –°–æ–∑–¥–∞–µ–º Excel –∫–Ω–∏–≥—É
    wb = Workbook()
    ws = wb.active
    ws.title = "–°–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–æ–≤"
    
    # –°—Ç–∏–ª–∏
    header_font = Font(bold=True, size=14)
    title_font = Font(bold=True, size=12)
    bold_font = Font(bold=True)
    center_align = Alignment(horizontal='center', vertical='center')
    border = Border(left=Side(style='thin'), right=Side(style='thin'), 
                   top=Side(style='thin'), bottom=Side(style='thin'))
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    ws.merge_cells('A1:H1')
    ws['A1'] = f"–°–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –æ—Ç {datetime.now().strftime('%d.%m.%Y')}"
    ws['A1'].font = header_font
    ws['A1'].alignment = center_align
    
    # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    ws.append([])
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    headers = ['‚Ññ', '–¢–æ—á–∫–∞', '–ê–¥—Ä–µ—Å'] + list(positions.keys()) + ['–ò–¢–û–ì–û']
    ws.append(headers)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
    for col in range(1, len(headers) + 1):
        cell = ws.cell(row=3, column=col)
        cell.font = title_font
        cell.alignment = center_align
        cell.border = border
    
    # –î–∞–Ω–Ω—ã–µ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º
    row_num = 4
    for i, client in enumerate(clients_data, 1):
        row = [i, client['name'], client['address']]
        total = 0
        
        for pos in positions.keys():
            qty = client['orders'].get(pos, 0)
            row.append(qty)
            total += qty
        
        row.append(total)
        ws.append(row)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ —Å—Ç—Ä–æ–∫–µ
        for col in range(1, len(headers) + 1):
            cell = ws.cell(row=row_num, column=col)
            cell.border = border
            if col in [1, len(headers)]:  # ‚Ññ –∏ –ò–¢–û–ì–û - –∂–∏—Ä–Ω—ã–π
                cell.font = bold_font
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
    ws.append([])
    total_row = ['–í–°–ï–ì–û', '', '']
    
    for pos in positions.keys():
        pos_total = sum(client['orders'].get(pos, 0) for client in clients_data)
        total_row.append(pos_total)
    
    total_row.append(sum(total_row[3:]))
    ws.append(total_row)
    
    # –°—Ç–∏–ª–∏ –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    for col in range(1, len(headers) + 1):
        cell = ws.cell(row=row_num + 2, column=col)
        cell.font = bold_font
        cell.border = border
        if col >= 4:  # –ß–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            cell.alignment = center_align
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
    column_widths = {
        'A': 5,    # ‚Ññ
        'B': 25,   # –¢–æ—á–∫–∞
        'C': 30,   # –ê–¥—Ä–µ—Å
    }
    
    # –®–∏—Ä–∏–Ω–∞ –¥–ª—è –ø–æ–∑–∏—Ü–∏–π
    for i, pos in enumerate(positions.keys(), 4):
        col_letter = get_column_letter(i)
        column_widths[col_letter] = 8
    
    # –®–∏—Ä–∏–Ω–∞ –¥–ª—è –ò–¢–û–ì–û
    column_widths[get_column_letter(len(headers))] = 10
    
    for col, width in column_widths.items():
        ws.column_dimensions[col].width = width
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
    excel_buffer = io.BytesIO()
    wb.save(excel_buffer)
    excel_buffer.seek(0)
    
    return excel_buffer

def send_excel_summary(call=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ Excel —Å–≤–æ–¥–∫–∏"""
    try:
        excel_buffer = generate_excel_file()
        
        if not excel_buffer:
            if call:
                bot.answer_callback_query(call.id, "–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤")
                bot.send_message(call.message.chat.id, "üì≠ –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.")
            else:
                bot.send_message(ADMIN_CHAT_ID, "üì≠ –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel —Ñ–∞–π–ª
        filename = f"–∑–∞–∫–∞–∑—ã_{datetime.now().strftime('%d.%m.%Y')}.xlsx"
        
        if call:
            bot.answer_callback_query(call.id)
            bot.send_document(
                call.message.chat.id,
                document=excel_buffer,
                visible_file_name=filename,
                caption=f"üìä –°–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –æ—Ç {datetime.now().strftime('%d.%m.%Y')}\n\n–§–∞–π–ª –≥–æ—Ç–æ–≤ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ Excel"
            )
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑—ã –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
            current_date = datetime.now().strftime('%Y-%m-%d')
            active_users = {uid: data for uid, data in users_data.items() if data.get('orders')}
            
            for user_data in active_users.values():
                if user_data['orders']:
                    add_order_to_history(user_data, current_date)
            
            bot.send_document(
                ADMIN_CHAT_ID,
                document=excel_buffer,
                visible_file_name=filename,
                caption=f"üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –æ—Ç {datetime.now().strftime('%d.%m.%Y')}"
            )
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏
            clear_all_orders_auto()
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–≤–æ–¥–∫–∏: {e}")
        if not call:
            bot.send_message(ADMIN_CHAT_ID, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–≤–æ–¥–∫–∏: {e}")

def send_text_summary(call):
    """–¢–µ–∫—Å—Ç–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ (–¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞)"""
    active_users = {uid: data for uid, data in users_data.items() if data.get('orders')}
    
    if not active_users:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤")
        bot.send_message(call.message.chat.id, "üì≠ –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.")
        return
    
    clients_data = []
    for user_id, user_data in active_users.items():
        if user_data.get('orders'):
            clients_data.append({
                'name': user_data['location_name'],
                'address': user_data['address'],
                'orders': user_data['orders']
            })
    
    clients_data.sort(key=lambda x: x['name'])
    
    summary_text = f"üìä **–°–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –æ—Ç {datetime.now().strftime('%d.%m.%Y')}**\n"
    summary_text += f"üë• –ö–ª–∏–µ–Ω—Ç–æ–≤: {len(clients_data)}\n\n"
    
    for client in clients_data:
        total_items = sum(client['orders'].values())
        order_details = []
        
        for pos, qty in client['orders'].items():
            if qty > 0:
                order_details.append(f"{pos}:{qty}")
        
        details_str = ", ".join(order_details)
        summary_text += f"‚Ä¢ **{client['name']}** - {total_items} —à—Ç.\n"
        summary_text += f"  {details_str}\n"
        summary_text += f"  üìç {client['address']}\n\n"
    
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, summary_text, parse_mode='Markdown')

def show_clients_database(call):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–∑—É –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    if not users_data:
        bot.answer_callback_query(call.id, "–ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç–∞")
        bot.send_message(call.message.chat.id, "üë• –ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç–∞.")
        return
    
    registered_users = [data for data in users_data.values() if data['registered']]
    
    if not registered_users:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
        bot.send_message(call.message.chat.id, "üë• –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.")
        return
    
    clients_text = f"üë• **–ë–ê–ó–ê –ö–õ–ò–ï–ù–¢–û–í**\nüìä –í—Å–µ–≥–æ: {len(registered_users)}\n\n"
    
    for i, user_data in enumerate(registered_users, 1):
        order_count = sum(user_data['orders'].values())
        last_order = "‚úÖ –°–µ–≥–æ–¥–Ω—è" if order_count > 0 else "‚è≥ –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤"
        clients_text += f"{i}. **{user_data['location_name']}**\n"
        clients_text += f"   üìç {user_data['address']}\n"
        clients_text += f"   üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user_data.get('registration_date', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        clients_text += f"   üì¶ {last_order} ({order_count} —à—Ç.)\n\n"
    
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, clients_text, parse_mode='Markdown')

def show_orders_history(call):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤"""
    if not orders_history:
        bot.answer_callback_query(call.id, "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç–∞")
        bot.send_message(call.message.chat.id, "üìà –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç–∞.")
        return
    
    history_text = f"üìà **–ò–°–¢–û–†–ò–Ø –ó–ê–ö–ê–ó–û–í**\nüìä –î–Ω–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(orders_history)}\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    sorted_dates = sorted(orders_history.keys(), reverse=True)[:7]
    
    for date_str in sorted_dates:
        date_orders = orders_history[date_str]
        total_orders = len(date_orders)
        total_items = sum(order['total_items'] for order in date_orders)
        
        history_text += f"üìÖ **{datetime.strptime(date_str, '%Y-%m-%d').strftime('%d.%m.%Y')}**\n"
        history_text += f"   üë• –ö–ª–∏–µ–Ω—Ç–æ–≤: {total_orders}\n"
        history_text += f"   üì¶ –¢–æ–≤–∞—Ä–æ–≤: {total_items} —à—Ç.\n\n"
    
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='admin_stats'))
    
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, history_text, parse_mode='Markdown', reply_markup=markup)

def clear_all_orders(call):
    """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã"""
    cleared_count = 0
    for user_data in users_data.values():
        if user_data['orders']:
            user_data['orders'] = {}
            cleared_count += 1
    
    save_users_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    
    bot.answer_callback_query(call.id, f"–û—á–∏—â–µ–Ω–æ {cleared_count} –∑–∞–∫–∞–∑–æ–≤")
    bot.send_message(call.message.chat.id, f"üóëÔ∏è –û—á–∏—â–µ–Ω—ã –∑–∞–∫–∞–∑—ã —É {cleared_count} –∫–ª–∏–µ–Ω—Ç–æ–≤!")

def clear_all_orders_auto():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤ (–±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)"""
    cleared_count = 0
    for user_data in users_data.values():
        if user_data['orders']:
            user_data['orders'] = {}
            cleared_count += 1
    
    if cleared_count > 0:
        save_users_data()
    
    print(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–µ–Ω—ã –∑–∞–∫–∞–∑—ã —É {cleared_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

def export_all_data(call):
    """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ JSON"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        export_data = {
            'users': users_data,
            'orders_history': orders_history,
            'export_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }
        
        export_json = json.dumps(export_data, ensure_ascii=False, indent=2)
        filename = f"backup_data_{datetime.now().strftime('%Y%m%d_%H%M')}.json"
        
        bot.answer_callback_query(call.id)
        bot.send_document(
            call.message.chat.id,
            document=(filename, io.BytesIO(export_json.encode('utf-8'))),
            caption="üíæ –ü–æ–ª–Ω—ã–π –±—ç–∫–∞–ø –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã"
        )
    except Exception as e:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞")
        bot.send_message(call.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

def check_scheduled_tasks():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
    msk_tz = timezone(timedelta(hours=3))
    now = datetime.now(msk_tz)
    current_time = now.strftime('%H:%M')
    
    print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á –≤ {current_time} MSK")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–∫–∏ –≤ 20:00
    if now.hour == 20 and now.minute == 0:
        print("üïó –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏ 20:00")
        try:
            send_excel_summary()
            print("‚úÖ –°–≤–æ–¥–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏: {e}")
    
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ 23:00
    elif now.hour == 23 and now.minute == 0:
        print("üïö –í—Ä–µ–º—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö 23:00")
        try:
            clear_all_orders_auto()
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

def scheduler():
    """–û—Å–Ω–æ–≤–Ω–æ–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
    print("üîÑ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
    
    while True:
        try:
            check_scheduled_tasks()
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
            time.sleep(60)

def setup_webhook():
    bot.remove_webhook()
    time.sleep(1)
    railway_url = os.environ.get('RAILWAY_STATIC_URL')
    if not railway_url:
        app_name = os.environ.get('RAILWAY_PROJECT_NAME', 'your-app-name')
        railway_url = f"https://{app_name}.up.railway.app"
    webhook_url = f"{railway_url}{BOT_URL}"
    bot.set_webhook(webhook_url)

if __name__ == '__main__':
    setup_webhook()
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    scheduler_thread = threading.Thread(target=scheduler, daemon=True)
    scheduler_thread.start()
    print("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω")
    
    port = int(os.environ.get('PORT', 8000))
    app.run(host='0.0.0.0', port=port)
