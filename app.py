import os
import telebot
from telebot.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
import schedule
import time
from datetime import datetime, timedelta, timezone
from flask import Flask, request, abort
import threading

# –¢–≤–æ–π —Ç–æ–∫–µ–Ω –æ—Ç BotFather - –ò–ó–ú–ï–ù–ï–ù–û –¥–ª—è Railway
TOKEN = os.environ.get('BOT_TOKEN')
BOT_URL = '/webhook'

# ID —á–∞—Ç–∞ –¥–ª—è —Å–≤–æ–¥–∫–∏
ADMIN_CHAT_ID = os.environ.get('ADMIN_CHAT_ID')

if not TOKEN or not ADMIN_CHAT_ID:
    raise ValueError("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã BOT_TOKEN –∏–ª–∏ ADMIN_CHAT_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

bot = telebot.TeleBot(TOKEN)

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –≤–µ—Å–∞–º–∏ (–≤ –≥—Ä–∞–º–º–∞—Ö)
positions = {
    '–í–∞—Ç—Ä—É—à–∫–∞': 200,
    '–ö–∞–ø—É—Å—Ç–∞': 130,
    '–Ø–±–ª–æ–∫–æ': 120,
    '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å': 130,
    '–ú–∞–∫': 190,
    '–ü–ª—é—à–∫–∞': 150,
    '–ß–µ—á–µ–≤–∏—Ü–∞': 140,
    '–ü–æ–≤–∏–¥–ª–æ': 130,
    '–ö–æ—Ä–∏—Ü–∞': 150,
    '–°–æ—Å–∏—Å–∫ –≤ —Ç–µ—Å—Ç–µ': 150,
    '–ë—Ä—É—Å–Ω–∏–∫–∞': 130,
    '–í–∏—à–Ω—è': 130,
    '–ß–µ—Ä–Ω–∞—è —Å–º–æ—Ä–æ–¥–∏–Ω–∞': 130,
    '–¢–≤–æ—Ä–æ–≥ —Å –∑–µ–ª–µ–Ω—å—é': 130
}

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤: {username: {'–ø–æ–∑–∏—Ü–∏—è': –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ}}
orders = {}

# –¢–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è multi-step: –≤—ã–±–æ—Ä –ø–æ–∑–∏—Ü–∏–∏ -> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
current_orders = {}  # {user_id: {'position': str}}

app = Flask(__name__)


# Webhook —ç–Ω–¥–ø–æ–∏–Ω—Ç
@app.route(BOT_URL, methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return ''
    else:
        abort(403)


@app.route('/')
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Railway! üöÇ"


@bot.message_handler(commands=['start'])
def start(message: Message):
    markup = InlineKeyboardMarkup(row_width=2)
    for pos in positions.keys():
        markup.add(InlineKeyboardButton(pos, callback_data=pos))

    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∑–∞–∫–∞–∑–∞:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    user_id = call.from_user.id
    position = call.data

    if position in positions:
        current_orders[user_id] = {'position': position}
        bot.answer_callback_query(call.id, f"–í—ã–±—Ä–∞–Ω–æ: {position}")
        bot.send_message(call.message.chat.id, f"–°–∫–æ–ª—å–∫–æ —à—Ç—É–∫ {position} (–≤–µ—Å: {positions[position]} –≥—Ä.)?")
    else:
        bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è")


@bot.message_handler(func=lambda message: True)
def handle_quantity(message: Message):
    user_id = message.from_user.id
    if user_id not in current_orders:
        bot.reply_to(message, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø–æ–∑–∏—Ü–∏—é —á–µ—Ä–µ–∑ /start")
        return

    position = current_orders[user_id]['position']
    try:
        quantity = int(message.text.strip())
        if quantity <= 0:
            raise ValueError

        username = message.from_user.username or f"User_{user_id}"
        if username not in orders:
            orders[username] = {}

        if position in orders[username]:
            orders[username][position] += quantity
        else:
            orders[username][position] = quantity

        bot.reply_to(message, f"–î–æ–±–∞–≤–ª–µ–Ω–æ {quantity} —à—Ç. {position} –¥–ª—è {username}!")
        del current_orders[user_id]  # –°–±—Ä–æ—Å –ø–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞

        # –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å–Ω–æ–≤–∞
        start(message)
    except ValueError:
        bot.reply_to(message, "–í–≤–µ–¥–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!")


# –§—É–Ω–∫—Ü–∏—è —Å–≤–æ–¥–∫–∏
def send_summary():
    if not orders:
        bot.send_message(ADMIN_CHAT_ID, "–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –¥–µ–Ω—å.")
        return

    all_positions = sorted(positions.keys())
    clients = sorted(orders.keys())

    # –¢–∞–±–ª–∏—Ü–∞ –≤ Markdown
    table = "| –ü–æ–∑–∏—Ü–∏—è | –í–µ—Å (–≥—Ä.) | " + " | ".join(clients) + " |\n"
    table += "| --- | --- | " + " | ".join(["---"] * len(clients)) + " |\n"

    for pos in all_positions:
        row = f"| {pos} | {positions[pos]} |"
        for client in clients:
            qty = orders.get(client, {}).get(pos, 0)
            row += f" {qty} |"
        table += row + "\n"

    bot.send_message(ADMIN_CHAT_ID, "–°–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –¥–µ–Ω—å:\n" + table, parse_mode='Markdown')
    orders.clear()


# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
def scheduler():
    msk_tz = timezone(timedelta(hours=3))
    while True:
        now = datetime.now(msk_tz)
        if now.hour == 20 and now.minute == 0:
            send_summary()
        time.sleep(60)


def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è Railway"""
    bot.remove_webhook()
    time.sleep(1)

    # –ò–ó–ú–ï–ù–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º URL –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç Railway
    railway_url = os.environ.get('RAILWAY_STATIC_URL')
    if not railway_url:
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Railway –¥–æ–º–µ–Ω
        app_name = os.environ.get('RAILWAY_PROJECT_NAME', 'your-app-name')
        railway_url = f"https://{app_name}.up.railway.app"

    webhook_url = f"{railway_url}{BOT_URL}"
    print(f"Setting webhook to: {webhook_url}")
    bot.set_webhook(webhook_url)


if __name__ == '__main__':
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    setup_webhook()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=scheduler, daemon=True).start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    port = int(os.environ.get('PORT', 8000))
    app.run(host='0.0.0.0', port=port)
